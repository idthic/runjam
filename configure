#!/usr/bin/env bash

PACKAGE_VERSION=0.3.0-alpha

function string#quote-arguments {
  ret=()
  local q=\' Q="'\''" special=$' \t\n\\`$!^'\"\'"#&|;()<>[*?]~{,}"
  while (($#)); do
    if [[ $1 == *["$special"]* ]]; then
      ret+=("'${1//$q/$Q}'")
    else
      ret+=("$1")
    fi
    shift
  done
}

function check-lib {
  local prefix=$1 name=$2
  [[ -s $prefix/lib/lib$name.a || -s $prefix/lib/lib$name.so ]]
}

CXX=g++

function readargs/option:with-jam1 {
  if check-lib "$1" jam; then
    libjam1_PREFIX=$1
  else
    echo "configure: jam1 not found at '$1'" >&2
    [[ :$2: == *:opt:* ]] || flags=E$flags
    return 1
  fi
}
function readargs/option:with-jam2 {
  if check-lib "$1" jam2; then
    libjam2_PREFIX=$1
  else
    echo "configure: jam2 not found at '$1'" >&2
    [[ :$2: == *:opt:* ]] || flags=E$flags
    return 1
  fi
}
function readargs/option:with-pythia8 {
  if check-lib "$1" pythia8; then
    pythia8_PREFIX=$1
  else
    echo "configure: pythia8 not found at '$1'" >&2
    [[ :$2: == *:opt:* ]] || flags=E$flags
    return 1
  fi
}
function readargs/option:help {
  printf '%s\n' \
         'usage: configure [OPTION|VAR=VAL]...' \
         '' \
         'OPTION' \
         '  --prefix=DIR' \
         '  --with-jam1=JAM1_PREFIX_DIR' \
         '  --with-jam2=JAM2_PREFIX_DIR' \
         '  --with-pythia8=Pythia8_PREFIX_DIR' \
         ''
}

## @fn readargs
##   @var[out] flags
##   @var[out] PREFIX
##   @var[out] libjam1_PREFIX
function readargs {
  flags=
  libjam1_PREFIX=
  libjam2_PREFIX=
  pythia8_PREFIX=
  PREFIX=~/.opt/idt

  while (($#)); do
    local arg=$1; shift
    if [[ $flags != *R* ]]; then
      if local rex='^[[:alnum:]_]+='; [[ $arg =~ $rex ]]; then
        printf -v "${arg%%=*}" %s "${arg#*=}"
      elif [[ $arg == -* ]]; then
        case $arg in
        (--help)
          readargs/option:help
          flags=H$flags ;;

        (--prefix=*) PREFIX=${arg#*=} ;;
        (--prefix)   PREFIX=$1; shift ;;
        (--with-jam1=*) readargs/option:with-jam1 "${arg#*=}" ;;
        (--with-jam1)   readargs/option:with-jam1 "$1"; shift ;;
        (--with-jam2=*) readargs/option:with-jam2 "${arg#*=}" ;;
        (--with-jam2)   readargs/option:with-jam2 "$1"; shift ;;
        (--with-pythia8=*) readargs/option:with-pythia8 "${arg#*=}" ;;
        (--with-pythia8)   readargs/option:with-pythia8 "$1"; shift ;;

        # old names of the option
        (--with-jam=*) readargs/option:with-jam1 "${arg#*=}" ;;
        (--with-jam)   readargs/option:with-jam1 "$1"; shift ;;

        (*)
          echo "configure: unknown option '$arg'" >&2
          flags=E$flags ;;
        esac
      else
        echo "configure: unrecognized argument '$arg'" >&2
        flags=E$flags
      fi
    fi
  done

  : "${PREFIX:-/usr}"
  [[ $flags != *E* ]]
}

function main {
  local flags libjam1_PREFIX libjam2_PREFIX pythia8_PREFIX
  readargs "$@" || return 1
  [[ $flags == *H* ]] && return 0

  # fall back to default locations
  [[ $libjam1_PREFIX ]] ||
    readargs/option:with-jam1 ~/opt/jam/1.820 opt ||
    readargs/option:with-jam1 ~/opt/jam-1.820 opt
  [[ $libjam1_PREFIX ]] ||
    readargs/option:with-jam2 ~/.opt/jam/dev jam2 opt
  [[ $pythia8_PREFIX ]] ||
    readargs/option:with-pythia8 ~/.opt/pythia/8.244mod opt

  # determine caps
  use_libjam1=
  use_libjam2=
  if [[ $libjam1_PREFIX ]]; then
    use_libjam1=yes
    libjam1_MXV=200000
  fi
  if [[ $libjam2_PREFIX && $pythia8_PREFIX ]]; then
    use_libjam2=yes
  fi

  echo ---------------------------------------
  {
    echo '# -*- mode: makefile-gmake -*-'
    echo
    {
      local ret
      string#quote-arguments "$@"
      echo "configure := ./configure ${ret[*]}"
      echo "PREFIX    := $PREFIX"
      echo "CXX       := $CXX"
      echo "CPPFLAGS  := $CPPFLAGS"
      echo "CXXFLAGS  := $CXXFLAGS"
      echo "LDFLAGS   := $LDFLAGS"
      echo "LIBS      := $LIBS"
      echo "use_libjam1 := $use_libjam1"
      echo "ifneq (\$(use_libjam1),)"
      echo "  libjam1_PREFIX := $libjam1_PREFIX"
      echo "  libjam1_MXV    := $libjam1_MXV"
      echo "endif"
      echo "use_libjam2 := $use_libjam2"
      echo "ifneq (\$(use_libjam2),)"
      echo "  libjam2_PREFIX := $libjam2_PREFIX"
      echo "  pythia8_PREFIX := $pythia8_PREFIX"
      echo "endif"
    } | tee /dev/tty
  } > config.mk

  {
    echo "#ifndef CONFIG_HPP"
    echo "#define CONFIG_HPP"
    echo "#define PACKAGE_VERSION \"$PACKAGE_VERSION\""
    echo "#define PACKAGE_PREFIX  \"$PREFIX\""
    echo "#define PACKAGE_BUILD   \"$PWD\""
    if [[ $use_libjam1 ]]; then
      echo "#define USE_LIBJAM1 1"
      echo "#define CONFIG_JAM_MXV $libjam1_MXV"
    else
      echo "#undef USE_LIBJAM1"
    fi
    if [[ $use_libjam2 ]]; then
      echo "#define USE_LIBJAM2 1"
      echo "#define Pythia8_PREFIX \"$pythia8_PREFIX\""
    else
      echo "#undef USE_LIBJAM2"
    fi
    if [[ $use_libjam2 ]]; then
      echo "#define DEFAULT_JAM_VERSION 2"
    elif [[ $use_libjam1 ]]; then
      echo "#define DEFAULT_JAM_VERSION 1"
    else
      echo "#define DEFAULT_JAM_VERSION 0"
    fi
    echo 'namespace idt {'
    echo 'namespace runjam {'
    echo '  extern const char* package_hash;'
    echo '}'
    echo '}'
    echo "#endif"
  } > config.hpp

  {
    echo '#include "config.hpp"'
    echo 'namespace idt {'
    echo 'namespace runjam {'
    echo '  const char* package_hash = "";'
    echo '}'
    echo '}'
  } > config.cpp
  ./mktool.sh update-commit-hash
  echo ---------------------------------------
}

main "$@"
